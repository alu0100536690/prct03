18. puts ’Hola Mundo’ imprime la frase hola mundo

21. 46_ Que con las comillas simples se escribirá lo que esté dentro tal cual lo escribamos, mientras que con las comillas dobles se ejecutarán las expresiones que pongamos entre ellas.

22. a)Funciona como si pusieramos entre comillas simples la 
expresión que se pone a continuación.
 b)Es: hello world\n. 
c) Es 'a' 'b' 'c'

23. a)Funciona como si pusieramos entre comillas dobles la 

expresión que viene a continuación. 
b)Es: hello world. 
c) Es "a" "b" "c"

24. En c queda "--4--\n--2--\n" . Lo que hizo el c = 
<<HERE ....HERE fue concatenar las dos variables y guardarlas

25. En c queda "--\#{a}--\n--\#{b}--\n". Lo que hizo el c = 
<<'HERE' ...HERE fue concatenar las dos expresiones ya que al tener
comillas simples, se guarda tal cual lo escribimos y no coge el 
valor de la variable

26. s[0,2] -> he
    s[-1,1] -> o
    s[0,10] -> hello
El primer valor del corchete indica el caracter mínimo de donde 
empieza, el segundo valor indica el máximo caracter donde va a terminar la cadena.

27. Queda: helloworld. Lo que hace g<<world es insertar esa cadena 
de caracteres dentro de g, concatenandola con la que ya tenía (si es que tenía alguna ya).

28. Queda: ... Lo que hace e='.'*3 es poner tantos simbolos de los entre comillados como el valor puesto despues del asterisco.

29. El resultado es "222". Lo que hace "#{a=a+1} "*3 es mostrar el valor de la variable a, tantas veces como el calor del número puesto después del asterisco

30. Interpreta cada palabra separada por espacios en blanco, como cadena de caracteres individuales en comillas simples(Escribe todo tal cual lo ponemos).


31. Interpreta cada palabra separada por espacios en blanco como 
cadena de caracteres iguales en comillas simples(Escribe todo tal cual lo ponemos).

32. Interpreta cada palabra separada por espacios en blanco como cadena de caracteres iguales en comillas dobles, ya que ejecutará lo de dentro si esta es una expresión

33. Contiene nils tantas veces como especificamos en el valor del array. Es decir, es un array de valores nils(Se inicializa todo el array a nil)

34. Contiene el segundo parámetro que le paramos a Array.new tantas veces como el primer parámetro. Es decir, es un array de tamaño 3 de valor 0 en todas sus casillas(Se inicializa todo el array a 0)

35. Queda el array de tamaño igual que el array x y de los mismos valores que el array x.(Crea una copia del array x y lo guarda en b)

36. Crea un array de tamaño 3 que se va a inicializar cada casilla del array con el valor que tome i en la expresión. Se evalua la expresión en cada posicion del array, y cada vez que cambia de posición la i se incrementa en 1.

37

• [“b”]

• [“d”, “e”]

• [“a”, “b”, “c”]

• [“a”]

• [“d”, “e”]

Lo que hace el método .to_a es establecer el rango ede valores como un array. En la llamada a dicho array se le pasan distintos rangos para que muestre. Con dos puntos entre medio, significa que se incluyen los dos valores. Con tres puntos en medio significa que no se incluye el valor superior del rango.

38

• [“A”, “B”, “c”, “d”, “e”]

• ["A", "B", "C", "D", "E"]

• [1, 2, 3, "A", "B", "C", "D", "E"]

• [3, "A", "B", "C", "D", "E"]

• [3, "A", "B", "C", "D", "Z"]

• [3, "A", "B", "C"]

Al asignarle a: a valores para poner en las posiciones del array que corresponden, estos se insertan en dichas posiciones o en dichos rangos de posiciones.

39.

• [1, 2, 3]

• [1, 2, 3, 4, 5]

• [1, 2, 3, 4, 5, 6, 7, 8]

• TypeError: can't convert Fixnum into Array

 from (irb):43:in `+'

 from (irb):43

 from :0

Con el operador suma y asignándole más valores al array dentro de corchetes, estos se van colocando en la última posición del array, por lo que va creciendo. El último ejemplo debería ser: a=a+[9] para que se pueda añadir el dígito 9 en la última posición del array, sino se nos presenta el error mostrado arriba

40.

• []

• [1]

• [1, 2, 3]

• [1, 2, 3, [4, 5, 6]]

• [1, 2, 3, [4, 5, 6], 7, 8]

El operador << también funciona como el operador suma para concatenar valores en el array, pero interpreta todo lo que escribamos como símbolo a añadir al array, por eso inserta también los corchetes. Sin embargo, el método concat, concatena los elementos como si se utilizase el operador suma, sin insertar los corchetes.

41.

• ["a", "b", "c", "b", "a"]

• ["a", "a"]

Resta los valores de su misma cadena, quitándole los elementos que queramos.

42.

• [0, 0, 0, 0, 0, 0, 0, 0]

Asigna a z la el array con un único 0, y este lo multiplica tantas veces como quiere que haya en el array.

43.

• [1, 2, 3, 4, 5]

• [5, 4, 3, 2, 1]

• [2, 3, 4]

• [4, 3, 2]

El operador | funciona como la unión de los dos conjuntos, dependiendo del orden de los conjuntos, unos se mostrarán antes y otros después. El operador & funciona como la intersección de los dos conjuntos (sólo los valores comunes), y el orden que se muestren también depende del orden en que los coloquemos con el operador.

44.

• [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

• [1, 2, 3, 4, 5, 6, 7, 8, 9]

• False

• True

• 13579=> 1...10

• (irb):78: warning: default `to_a' will be obsolete

ArgumentError: bad value for range

 from (irb):78

 from :0

A la variable: a, se le asigna un valor que aún no es un rango, al hacer .class te dice que pertenece a un rango de valores, al hacerle .to_a se convierte en un array con dicho rango de valores. El .include? valor es para que te responda si el valor que pones se encuentra en el array. El método .step(valor) es para que escoga lo que haya en las casillas del array saltándolas de tanto en tanto como el valor que se haya puesto. El print es para que te los 
muestre. El 1..3.to_a no se puede hacer ya que no se está haciendo el método sobre una variable sino sobre un rango directamente.

45.

• true

• true

• true

El member y el include también funcionan para un rango de valores sin que se le haya hecho el .to_a para convertirlos en array. Los dos sirven para lo mismo

46.

• hello

=> nil

• nil

• irb(main):093:0> puts "hello" if ""

(irb):93: warning: string literal in condition

hello

=> nil

47.

• Symbol

• False

• True

• Symbol

• True

• NoMethodError: undefined method `to_s=' for :sym:Symbol

 from (irb):103

 from :0

El operador dos puntos : , convierte lo que venga después en un 

símbolo. El método .to_sym aplicado a el valor de una variable hace 

que ésta se convierta en un símbolo. Si se aplica a la variable no 

funciona.



52. El yield 4,5 dentro de un bloque lo que hace es que se represente ahí el puts que hagas a la llamada de dicho bloque seguidamente de 4 5.

53. Hace que el hash counts se inicialize a 0. La diferencia es que con esta sentencia el hash se inicializa a nil.

54. Escanea e imprime en pantalla los resultados de la expresión regular sobre el lenguaje especificado entre comillas simples 

56. https://github.com/alu0100536690/prct03
